{"ast":null,"code":"import _objectSpread from\"/home/laboratoria143-am/Escritorio/Laboratoria/CDMX009-BurgerQueen/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/laboratoria143-am/Escritorio/Laboratoria/CDMX009-BurgerQueen/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{db}from'../../firebase';import{v4 as uuidv4}from'uuid';import{toast,Slide}from'react-toastify';import'react-toastify/dist/ReactToastify.css';import Masonry from'react-masonry-css';import'./Note.css';toast.configure();function KitchenNotes(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),incoming=_useState2[0],setIncoming=_useState2[1];var getOrders=function getOrders(){return db.collection('orders').where(\"status\",\"==\",\"in progress\").orderBy('date','desc').onSnapshot(function(querySnapshot){var docs=[];querySnapshot.forEach(function(doc){docs.push(_objectSpread(_objectSpread({},doc.data()),{},{id:doc.id}));console.log(docs);});setIncoming(docs);});};useEffect(function(){var unsubscribe=getOrders();return function(){unsubscribe();};},[]);var updateOrder=function updateOrder(id){db.collection('orders').doc(id).update({status:\"done\"}).then(function(){toast.success('Un meserx será notificado',{className:\"rounder-edges\",position:\"top-center\",autoClose:4000,hideProgressBar:true,closeOnClick:true,pauseOnHover:true,draggable:true,progress:undefined,transition:Slide});}).catch(function(){toast.error('Ocurrió un error, inténtalo de nuevo en un momento',{className:\"rounder-edges\",position:\"top-center\",autoClose:4000,hideProgressBar:true,closeOnClick:true,pauseOnHover:true,draggable:true,progress:undefined,transition:Slide});});};var incomingOrders=incoming.map(function(order){var difference=Date.now()-+order.date.toDate();// miliseconds between now and when the order was created\nvar color=Math.round(difference/1000/60);return/*#__PURE__*/React.createElement(\"div\",{className:color<=5?\"green-note\":color<=10?\"orange-note\":\"red-note\",key:order.id},/*#__PURE__*/React.createElement(\"h2\",{className:\"table\"},\" Mesa \",order.table),/*#__PURE__*/React.createElement(\"p\",null,\" Meserx: \",order.waiter),order.items.map(function(product){return/*#__PURE__*/React.createElement(\"div\",{className:\"products-on-note\",key:uuidv4()},/*#__PURE__*/React.createElement(\"ul\",{className:\"note-ul\"},/*#__PURE__*/React.createElement(\"li\",{className:\"product-name\"},product.item)),/*#__PURE__*/React.createElement(\"p\",{className:\"product-quantity\"},product.quantity));}),/*#__PURE__*/React.createElement(\"button\",{className:color<=5?\"green\":color<=10?\"orange\":\"red\",onClick:function onClick(){console.log(order);updateOrder(order.id);}},\"Orden lista!\"));});// breakpoints for responsive CSS Masonry\nvar breakpointColumnsObj={default:3,1100:3,700:2,500:1};if(incoming.length<=0){return/*#__PURE__*/React.createElement(\"div\",{className:\"no-orders-message-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"no-orders-message\"},\" A\\xFAn no hay ordenes :-) \"));}else{return/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(Masonry,{breakpointCols:breakpointColumnsObj,className:\"my-masonry-grid\",columnClassName:\"my-masonry-grid_column\"},incomingOrders));}}export default KitchenNotes;","map":{"version":3,"sources":["/home/laboratoria143-am/Escritorio/Laboratoria/CDMX009-BurgerQueen/my-app/src/components/KitchenNotes/index.js"],"names":["React","useState","useEffect","db","v4","uuidv4","toast","Slide","Masonry","configure","KitchenNotes","incoming","setIncoming","getOrders","collection","where","orderBy","onSnapshot","querySnapshot","docs","forEach","doc","push","data","id","console","log","unsubscribe","updateOrder","update","status","then","success","className","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","transition","catch","error","incomingOrders","map","order","difference","Date","now","date","toDate","color","Math","round","table","waiter","items","product","item","quantity","breakpointColumnsObj","default","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { db } from '../../firebase'\nimport { v4 as uuidv4 } from 'uuid'\nimport { toast, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Masonry from 'react-masonry-css'\nimport './Note.css'\n\ntoast.configure()\n\nfunction KitchenNotes(){\n\n    const [ incoming, setIncoming ] = useState([])\n\n    const getOrders = () =>{\n        return db\n        .collection('orders')\n        .where(\"status\", \"==\", \"in progress\")\n        .orderBy('date', 'desc')\n        .onSnapshot((querySnapshot) => {\n            const docs = []\n            querySnapshot.forEach((doc) => {\n                docs.push({...doc.data(), id: doc.id})\n                console.log(docs)\n            })\n            setIncoming(docs)\n        })\n    } \n\n    useEffect(() => {\n        let unsubscribe = getOrders()\n\n        return () => {\n            unsubscribe()\n        }\n      }, []);\n\n    const updateOrder = (id) => {\n        db    \n        .collection('orders')\n        .doc(id)\n        .update({\n            status: \"done\"\n        })\n        .then(() => {\n            toast.success('Un meserx será notificado', {\n                className: \"rounder-edges\",\n                position: \"top-center\",\n                autoClose: 4000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                transition: Slide\n                });\n        })\n        .catch(() =>{\n            toast.error('Ocurrió un error, inténtalo de nuevo en un momento', {\n                className: \"rounder-edges\",\n                position: \"top-center\",\n                autoClose: 4000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                transition: Slide\n                });\n        })   \n    }\n\n    let incomingOrders = incoming.map( order => {\n        let difference = Date.now() -  +order.date.toDate() // miliseconds between now and when the order was created\n        let color = Math.round((difference/1000)/60)\n\n        return (\n            <div \n                className={color <= 5 ? \"green-note\" : color <=10 ? \"orange-note\" : \"red-note\"} \n                key={order.id}\n            >\n                <h2 className=\"table\"> Mesa {order.table}</h2>\n                <p> Meserx: {order.waiter}</p>\n\n                    {order.items.map(product => {\n                        return (\n                            <div className=\"products-on-note\" key={uuidv4()} >\n                            <ul className=\"note-ul\">\n                                <li className=\"product-name\">{product.item}</li>\n                            </ul>\n                                <p className=\"product-quantity\">{product.quantity}</p>\n                            </div>\n                        )\n                    })}\n                    \n                <button \n                    className={color <= 5 ? \"green\" : color <=10 ? \"orange\" : \"red\"}\n                    onClick={() => {console.log(order); updateOrder(order.id)}}>\n                        Orden lista!\n                </button>\n            </div>\n        )\n    })\n\n    // breakpoints for responsive CSS Masonry\n    const breakpointColumnsObj = {\n        default: 3,\n        1100: 3,\n        700: 2,\n        500: 1\n      };\n\n    if (incoming.length <=0) {\n        return (\n            <div className=\"no-orders-message-container\">\n                <div className=\"no-orders-message\"> Aún no hay ordenes :-) </div> \n            </div>\n        )\n    } else{\n    return(\n        <div className='container'>\n            <Masonry\n                breakpointCols={breakpointColumnsObj}\n                className=\"my-masonry-grid\"\n                columnClassName=\"my-masonry-grid_column\">\n                    {incomingOrders}\n            </Masonry>\n        </div>\n    )\n}\n}\n\nexport default KitchenNotes"]},"metadata":{},"sourceType":"module"}