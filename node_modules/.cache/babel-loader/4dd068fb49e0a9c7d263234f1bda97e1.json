{"ast":null,"code":"var _jsxFileName = \"/home/laboratoria143-am/Escritorio/Laboratoria/CDMX009-BurgerQueen/my-app/src/components/KitchenNotes/Note.js\";\nimport React, { useState, useEffect } from 'react';\nimport { db, auth } from '../../firebase';\nimport { v4 as uuidv4 } from 'uuid';\nimport moment from 'moment';\nimport Masonry from 'react-masonry-css';\nimport './Note.css';\n\nfunction Note() {\n  const [incoming, setIncoming] = useState([]);\n\n  const getOrders = () => {\n    return db.collection('orders').where(\"status\", \"==\", \"in progress\").orderBy('date', 'desc').onSnapshot(querySnapshot => {\n      const docs = [];\n      querySnapshot.forEach(doc => {\n        docs.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      setIncoming(docs);\n    });\n  };\n\n  useEffect(() => {\n    let unsubscribe = getOrders();\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const updateOrder = id => {\n    db.collection('orders').doc(id).update({\n      status: \"done\"\n    }).then(() => {\n      alert('un meserx será notificado :)');\n    }).catch(() => {\n      alert('Ocurrió un error, intentalo de nuevo en un momento');\n    });\n  };\n\n  let incomingOrders = incoming.map(order => {\n    // let color = Math.floor(((Date.now() - Number(order.date)) / 6000) % 60)\n    let difference = Date.now() - Number(order.date); // miliseconds between now and when the order was created\n\n    let color = Math.round(difference / 1000 / 60);\n    console.log('hora', moment(order.date.toDate()).startOf('hour').fromNow());\n    console.log(color);\n    console.log('firebase date', order.date);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notes\",\n      key: order.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, \" Mesa \", order.table), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, \" Meserx: \", order.waiter), order.items.map(product => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"products-on-note\",\n        key: uuidv4(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"note-ul\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"product-name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 33\n        }\n      }, product.item)), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"product-quantity\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 33\n        }\n      }, product.quantity));\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"green\",\n      onClick: () => {\n        console.log(order);\n        updateOrder(order.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, \"Orden lista!\"));\n  }); // breakpoints for responsive CSS Masonry\n\n  const breakpointColumnsObj = {\n    default: 3,\n    1100: 3,\n    700: 2,\n    500: 1\n  };\n\n  if (incoming.length <= 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"no-orders-message-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"no-orders-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, \" A\\xFAn no hay ordenes :-) \"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Masonry, {\n      breakpointCols: breakpointColumnsObj,\n      className: \"my-masonry-grid\",\n      columnClassName: \"my-masonry-grid_column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, incomingOrders));\n  }\n}\n\nexport default Note;","map":{"version":3,"sources":["/home/laboratoria143-am/Escritorio/Laboratoria/CDMX009-BurgerQueen/my-app/src/components/KitchenNotes/Note.js"],"names":["React","useState","useEffect","db","auth","v4","uuidv4","moment","Masonry","Note","incoming","setIncoming","getOrders","collection","where","orderBy","onSnapshot","querySnapshot","docs","forEach","doc","push","data","id","unsubscribe","updateOrder","update","status","then","alert","catch","incomingOrders","map","order","difference","Date","now","Number","date","color","Math","round","console","log","toDate","startOf","fromNow","table","waiter","items","product","item","quantity","breakpointColumnsObj","default","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { db, auth } from '../../firebase'\nimport { v4 as uuidv4 } from 'uuid'\nimport moment from 'moment'\nimport Masonry from 'react-masonry-css'\nimport './Note.css'\n\nfunction Note(){\n\n    const [ incoming, setIncoming ] = useState([])\n\n    const getOrders = () =>{\n        return db\n        .collection('orders')\n        .where(\"status\", \"==\", \"in progress\")\n        .orderBy('date', 'desc')\n        .onSnapshot((querySnapshot) => {\n            const docs = []\n            querySnapshot.forEach((doc) => {\n                docs.push({...doc.data(), id: doc.id})\n            })\n            setIncoming(docs)\n        })\n    } \n\n    useEffect(() => {\n        let unsubscribe = getOrders()\n\n        return () => {\n            unsubscribe()\n        }\n      }, []);\n\n    const updateOrder = (id) => {\n        db    \n        .collection('orders')\n        .doc(id)\n        .update({\n            status: \"done\"\n        })\n        .then(() => {\n            alert('un meserx será notificado :)')\n        })\n        .catch(() =>{\n            alert('Ocurrió un error, intentalo de nuevo en un momento')\n        })   \n    }\n\n    let incomingOrders = incoming.map( order => {\n        // let color = Math.floor(((Date.now() - Number(order.date)) / 6000) % 60)\n        let difference = Date.now() - Number(order.date) // miliseconds between now and when the order was created\n        let color = Math.round((difference/1000)/60)\n        console.log('hora', moment(order.date.toDate()).startOf('hour').fromNow())\n        console.log(color)\n        console.log('firebase date', order.date)\n\n        return (\n            <div className=\"notes\" key={order.id}>\n                <h2 className=\"table\"> Mesa {order.table}</h2>\n                <p> Meserx: {order.waiter}</p>\n\n                    {order.items.map(product => {\n                        return (\n                            <div className=\"products-on-note\" key={uuidv4()} >\n                            <ul className=\"note-ul\">\n                                <li className=\"product-name\">{product.item}</li>\n                            </ul>\n                                <p className=\"product-quantity\">{product.quantity}</p>\n                            </div>\n                        )\n                    })}\n                    \n                <button className=\"green\" onClick={() => {console.log(order); updateOrder(order.id)}}>Orden lista!</button>\n            </div>\n        )\n    })\n\n    // breakpoints for responsive CSS Masonry\n    const breakpointColumnsObj = {\n        default: 3,\n        1100: 3,\n        700: 2,\n        500: 1\n      };\n    \n\n    if (incoming.length <=0) {\n        return (\n            <div className=\"no-orders-message-container\">\n                <div className=\"no-orders-message\"> Aún no hay ordenes :-) </div> \n            </div>\n        )\n    } else{\n    return(\n        <div className='container'>\n            <Masonry\n                breakpointCols={breakpointColumnsObj}\n                className=\"my-masonry-grid\"\n                columnClassName=\"my-masonry-grid_column\">\n                    {incomingOrders}\n            </Masonry>\n        </div>\n    )\n}\n}\n\nexport default Note"]},"metadata":{},"sourceType":"module"}