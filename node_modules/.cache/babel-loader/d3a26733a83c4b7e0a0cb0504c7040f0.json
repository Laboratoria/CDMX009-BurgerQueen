{"ast":null,"code":"var _jsxFileName = \"/home/laboratoria143-am/Escritorio/Laboratoria/CDMX009-BurgerQueen/my-app/src/components/KitchenNotes/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { db, auth } from '../../firebase';\nimport { v4 as uuidv4 } from 'uuid';\nimport { toast, Slide } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Masonry from 'react-masonry-css';\nimport './Note.css';\ntoast.configure();\n\nfunction KitchenNotes() {\n  const [incoming, setIncoming] = useState([]);\n  const date = new Date();\n  const today = [date.getDate(), date.getMonth(), date.getFullYear()].join('/');\n  console.log(today);\n\n  const getOrders = () => {\n    return db.collection('orders').where(\"status\", \"==\", \"in progress\").orderBy('date', 'desc').onSnapshot(querySnapshot => {\n      const docs = [];\n      querySnapshot.forEach(doc => {\n        docs.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      setIncoming(docs);\n    });\n  };\n\n  useEffect(() => {\n    let unsubscribe = getOrders();\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const updateOrder = id => {\n    db.collection('orders').doc(id).update({\n      status: \"done\"\n    }).then(() => {\n      toast.success('Un meserx será notificado', {\n        className: \"rounder-edges\",\n        position: \"top-center\",\n        autoClose: 4000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        transition: Slide\n      });\n    }).catch(() => {\n      toast.error('Ocurrió un error, inténtalo de nuevo en un momento', {\n        className: \"rounder-edges\",\n        position: \"top-center\",\n        autoClose: 4000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        transition: Slide\n      });\n    });\n  };\n\n  let incomingOrders = incoming.map(order => {\n    let difference = Date.now() - +order.date.toDate(); // miliseconds between now and when the order was created\n\n    let color = Math.round(difference / 1000 / 60);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: color <= 5 ? \"green-note\" : color <= 10 ? \"orange-note\" : \"red-note\",\n      key: order.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, \" Mesa \", order.table), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, \" Meserx: \", order.waiter), order.items.map(product => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"products-on-note\",\n        key: uuidv4(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"note-ul\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"product-name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }\n      }, product.item)), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"product-quantity\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 33\n        }\n      }, product.quantity));\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: color <= 5 ? \"green\" : color <= 10 ? \"orange\" : \"red\",\n      onClick: () => {\n        console.log(order);\n        updateOrder(order.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, \"Orden lista!\"));\n  }); // breakpoints for responsive CSS Masonry\n\n  const breakpointColumnsObj = {\n    default: 3,\n    1100: 3,\n    700: 2,\n    500: 1\n  };\n\n  if (incoming.length <= 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"no-orders-message-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"no-orders-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, \" A\\xFAn no hay ordenes :-) \"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Masonry, {\n      breakpointCols: breakpointColumnsObj,\n      className: \"my-masonry-grid\",\n      columnClassName: \"my-masonry-grid_column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, incomingOrders));\n  }\n}\n\nexport default KitchenNotes;","map":{"version":3,"sources":["/home/laboratoria143-am/Escritorio/Laboratoria/CDMX009-BurgerQueen/my-app/src/components/KitchenNotes/index.js"],"names":["React","useState","useEffect","db","auth","v4","uuidv4","toast","Slide","Masonry","configure","KitchenNotes","incoming","setIncoming","date","Date","today","getDate","getMonth","getFullYear","join","console","log","getOrders","collection","where","orderBy","onSnapshot","querySnapshot","docs","forEach","doc","push","data","id","unsubscribe","updateOrder","update","status","then","success","className","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","transition","catch","error","incomingOrders","map","order","difference","now","toDate","color","Math","round","table","waiter","items","product","item","quantity","breakpointColumnsObj","default","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { db, auth } from '../../firebase'\nimport { v4 as uuidv4 } from 'uuid'\nimport { toast, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Masonry from 'react-masonry-css'\nimport './Note.css'\n\ntoast.configure()\n\nfunction KitchenNotes(){\n\n    const [ incoming, setIncoming ] = useState([])\n\n    const date = new Date()\n    const today = [date.getDate(), date.getMonth(), date.getFullYear()].join('/')\n\n    console.log(today)\n\n    const getOrders = () =>{\n        return db\n        .collection('orders')\n        .where(\"status\", \"==\", \"in progress\")\n        .orderBy('date', 'desc')\n        .onSnapshot((querySnapshot) => {\n            const docs = []\n            querySnapshot.forEach((doc) => {\n                docs.push({...doc.data(), id: doc.id})\n            })\n            setIncoming(docs)\n        })\n    } \n\n    useEffect(() => {\n        let unsubscribe = getOrders()\n\n        return () => {\n            unsubscribe()\n        }\n      }, []);\n\n    const updateOrder = (id) => {\n        db    \n        .collection('orders')\n        .doc(id)\n        .update({\n            status: \"done\"\n        })\n        .then(() => {\n            toast.success('Un meserx será notificado', {\n                className: \"rounder-edges\",\n                position: \"top-center\",\n                autoClose: 4000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                transition: Slide\n                });\n        })\n        .catch(() =>{\n            toast.error('Ocurrió un error, inténtalo de nuevo en un momento', {\n                className: \"rounder-edges\",\n                position: \"top-center\",\n                autoClose: 4000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                transition: Slide\n                });\n        })   \n    }\n\n    let incomingOrders = incoming.map( order => {\n        let difference = Date.now() -  +order.date.toDate() // miliseconds between now and when the order was created\n        let color = Math.round((difference/1000)/60)\n\n        return (\n            <div \n                className={color <= 5 ? \"green-note\" : color <=10 ? \"orange-note\" : \"red-note\"} \n                key={order.id}\n            >\n                <h2 className=\"table\"> Mesa {order.table}</h2>\n                <p> Meserx: {order.waiter}</p>\n\n                    {order.items.map(product => {\n                        return (\n                            <div className=\"products-on-note\" key={uuidv4()} >\n                            <ul className=\"note-ul\">\n                                <li className=\"product-name\">{product.item}</li>\n                            </ul>\n                                <p className=\"product-quantity\">{product.quantity}</p>\n                            </div>\n                        )\n                    })}\n                    \n                <button \n                    className={color <= 5 ? \"green\" : color <=10 ? \"orange\" : \"red\"}\n                    onClick={() => {console.log(order); updateOrder(order.id)}}>\n                        Orden lista!\n                </button>\n            </div>\n        )\n    })\n\n    // breakpoints for responsive CSS Masonry\n    const breakpointColumnsObj = {\n        default: 3,\n        1100: 3,\n        700: 2,\n        500: 1\n      };\n\n    if (incoming.length <=0) {\n        return (\n            <div className=\"no-orders-message-container\">\n                <div className=\"no-orders-message\"> Aún no hay ordenes :-) </div> \n            </div>\n        )\n    } else{\n    return(\n        <div className='container'>\n            <Masonry\n                breakpointCols={breakpointColumnsObj}\n                className=\"my-masonry-grid\"\n                columnClassName=\"my-masonry-grid_column\">\n                    {incomingOrders}\n            </Masonry>\n        </div>\n    )\n}\n}\n\nexport default KitchenNotes"]},"metadata":{},"sourceType":"module"}